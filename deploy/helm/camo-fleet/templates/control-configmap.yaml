{{- $workerService := include "camofleet.worker.fullname" . -}}
{{- $workerVncService := include "camofleet.workerVnc.fullname" . -}}
{{- $defaultWorkers := list -}}
{{- if .Values.worker.enabled -}}
{{- $defaultWorkers = append $defaultWorkers (dict "name" "worker-headless" "url" (printf "http://%s:%d" $workerService (.Values.worker.service.port | int)) "supports_vnc" false) -}}
{{- end -}}
{{- if .Values.workerVnc.enabled -}}
{{- $workerVncConfig := dict "name" "worker-vnc" "url" (printf "http://%s:%d" $workerVncService (.Values.workerVnc.service.port | int)) "supports_vnc" true -}}
{{- $vncOverrides := default dict .Values.workerVnc.controlOverrides -}}
{{- $vncWsOverride := index $vncOverrides "ws" -}}
{{- $rawVncHost := default .Values.ingress.host .Values.workerVnc.ingressRoute.host -}}
{{- $vncHostValue := trim (default "" $rawVncHost) -}}
{{- $ingressConfigured := and .Values.workerVnc.ingressRoute.enabled $vncHostValue -}}
{{- if $vncWsOverride -}}
{{- $_ := set $workerVncConfig "vnc_ws" $vncWsOverride -}}
{{- else if $ingressConfigured -}}
{{- $vncHost := $vncHostValue -}}
{{- $vncIngress := .Values.workerVnc.ingressRoute | default dict -}}
{{- $vncPathPrefix := default "/vnc" $vncIngress.pathPrefix -}}
{{- $vncPathBase := trimSuffix "/" $vncPathPrefix -}}
{{- if eq $vncPathBase "" -}}
{{- $vncPathBase = "/vnc" -}}
{{- end -}}
{{- $vncTls := $vncIngress.tls | default dict -}}
{{- $tlsEnabled := or ($vncTls.enabled) ($vncTls.secretName) ($vncTls.certResolver) -}}
{{- if not $tlsEnabled -}}
{{- $globalTls := .Values.ingress.tls | default dict -}}
{{- $tlsEnabled = or ($globalTls.enabled) ($globalTls.secretName) ($globalTls.certResolver) -}}
{{- end -}}
{{- $wsScheme := ternary "wss" "ws" $tlsEnabled -}}
{{- $_ := set $workerVncConfig "vnc_ws" (printf "%s://%s%s/{port}/websockify" $wsScheme $vncHost $vncPathBase) -}}
{{- else -}}
{{- $_ := set $workerVncConfig "vnc_ws" (printf "ws://%s:{port}" $workerVncService) -}}
{{- end -}}
{{- $vncHttpOverride := index $vncOverrides "http" -}}
{{- if $vncHttpOverride -}}
{{- $_ := set $workerVncConfig "vnc_http" $vncHttpOverride -}}
{{- else if $ingressConfigured -}}
{{- $vncHost := $vncHostValue -}}
{{- $vncIngress := .Values.workerVnc.ingressRoute | default dict -}}
{{- $vncPathPrefix := default "/vnc" $vncIngress.pathPrefix -}}
{{- $vncPathBase := trimSuffix "/" $vncPathPrefix -}}
{{- if eq $vncPathBase "" -}}
{{- $vncPathBase = "/vnc" -}}
{{- end -}}
{{- $vncTls := $vncIngress.tls | default dict -}}
{{- $tlsEnabled := or ($vncTls.enabled) ($vncTls.secretName) ($vncTls.certResolver) -}}
{{- if not $tlsEnabled -}}
{{- $globalTls := .Values.ingress.tls | default dict -}}
{{- $tlsEnabled = or ($globalTls.enabled) ($globalTls.secretName) ($globalTls.certResolver) -}}
{{- end -}}
{{- $httpScheme := ternary "https" "http" $tlsEnabled -}}
{{- $_ := set $workerVncConfig "vnc_http" (printf "%s://%s%s/{port}/vnc.html" $httpScheme $vncHost $vncPathBase) -}}
{{- else -}}
{{- $_ := set $workerVncConfig "vnc_http" (printf "http://%s:{port}" $workerVncService) -}}
{{- end -}}
{{- $defaultWorkers = append $defaultWorkers $workerVncConfig -}}
{{- end -}}
{{- $workers := default $defaultWorkers .Values.control.config.workers -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "camofleet.control.fullname" . }}-config
  labels:
    app: {{ include "camofleet.control.fullname" . }}
{{ include "camofleet.labels" . | indent 4 }}
data:
  CONTROL_WORKERS: |-
{{ toJson $workers | nindent 4 }}
  CONTROL_PUBLIC_API_PREFIX: {{ .Values.control.publicApiPrefix | quote }}
